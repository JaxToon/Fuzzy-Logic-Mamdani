# -*- coding: utf-8 -*-
"""Fuzzy Logic Peargy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1REzoq_DDKIDqDK6DKzCQ_TCWTEV9RQKZ

# **IMPORT LIBRARY**
"""

from tabulate import tabulate
import matplotlib.pyplot as plt
import pandas

"""# **Grafik Harga**"""

trapesium1 = [[4,0], [2,1], [0,1]] 
trapesium2 = [[7,0],[5,1], [4,1], [2,0]]
trapesium3 = [[10,1],[7,1],[5,0]]

bangun_datar = [trapesium1,trapesium2,trapesium3]

fig,ax = plt.subplots()

for b in bangun_datar:
  xs, ys = zip(*b) 
  ax.plot(xs,ys)

plt.xlabel("Harga Barang")
plt.legend(["murah","sedang","mahal"])

"""# **Grafik Kualitas**"""

trapesium1 = [[40,0], [20,1], [0,1] ] 
trapesium2 = [[70,0], [50,1], [40,1], [20,0]]
trapesium3 = [[100,1],[70,1],[50,0]]

bangun_datar = [trapesium1,trapesium2,trapesium3]

fig,ax = plt.subplots()

for b in bangun_datar:
  xs, ys = zip(*b) 
  ax.plot(xs,ys)

plt.xlabel("Kualitas Barang")
plt.legend(["buruk","sedang","bagus"])

"""# **Aturan Fuzzy Untuk Nilai Kelayakan**"""

data = [
    ['Buruk', 'rendah','rendah','rendah'],
    ['Sedang', 'tinggi','rendah','rendah'],
    ['Bagus','tinggi','tinggi','rendah']
]
headers = ['Kualitas\harga', 'murah', 'sedang', 'mahal']

print(tabulate(data, headers, tablefmt='grid'))

"""# **Grafik Skala Nilai Kelayakan**"""

trapesium1 = [[80,0], [70,1], [0,1] ] 
trapesium2 = [[100,1],[80,1],[70,0]]

bangun_datar = [trapesium1,trapesium2]

fig,ax = plt.subplots()

for b in bangun_datar:
  xs, ys = zip(*b) 
  ax.plot(xs,ys)

plt.xlabel("Nilai Kelayakan")
plt.legend(["rendah","tinggi"])

"""# **Read Files dan Fuzzyfication**
ps : silahkan upload file supplier.xlsx ke google colabnya
"""

excel_data_df = pandas.read_excel('supplier.xlsx', sheet_name='Sheet1', usecols=['kualitas', 'harga'])
kualitas = excel_data_df["kualitas"].to_numpy().tolist()
harga = excel_data_df["harga"].to_numpy().tolist()

def fuzzyficationQuality(x):
  i = 0 
  if x <= 20 :
    valuea = [["buruk",1]]
    return valuea
  elif x >= 40 and x <= 50 :
    valuea = [["sedang",1]]
    return valuea
  elif x >= 70 :
    valuea = [["bagus",1]]
    return valuea
  elif x > 20 and x < 40 :
     valueRendah = -(x-40)/(40-20)
     valueSedang = (x-20)/(40-20)
     valuea = [["buruk",valueRendah],["sedang",valueSedang]]
     return valuea
  elif x > 50 and x < 70 :
    valueSedang = -( x - 70 ) / ( 70 - 50 )
    valueTinggi = ( x - 50 ) / ( 70 - 50 )
    valuea = [["sedang",valueSedang],["bagus",valueTinggi]]
    return valuea

def fuzzyficationPrice(x):
  i = 0
  if x <= 2 :
    valueb = [["murah",1]]
    return valueb
  elif x >= 4 and x <= 5 :
    valueb = [["sedang",1]]
    return valueb
  elif x >= 7 :
    valueb = [["mahal",1]]
    return valueb
  elif x > 2 and x < 4 :
     valueRendah = - ( x - 4 ) / ( 4 - 2 )
     valueSedang = ( x - 2 ) / ( 4 - 2 )
     valueb = [["murah",valueRendah],["sedang",valueSedang]]
     return valueb
  elif x > 5 and x < 7 :
    valueSedang = -( x - 7 ) / ( 7 - 5 )
    valueTinggi = ( x - 5 ) / ( 7 - 5 )
    valueb = [["sedang",valueSedang],["mahal",valueTinggi]]
    return valueb

"""# **Fuzzy Rules dan inferensi**"""

def fuzzyrules (valuea,valueb):
  if valuea[0] == "buruk" and valueb[0] == "murah":
    return ["rendah",min(valuea[1] , valueb[1])]
  elif valuea[0] == "buruk" and valueb[0] == "sedang":
    return ["rendah",min(valuea[1] , valueb[1])]
  elif valuea[0] == "buruk" and valueb[0] == "mahal":
    return ["rendah",min(valuea[1] , valueb[1])]
  elif valuea[0] == "sedang" and valueb[0] == "murah":
    return ["tinggi",min(valuea[1] , valueb[1])]
  elif valuea[0] == "sedang" and valueb[0] == "sedang":
    return ["rendah",min(valuea[1] ,valueb[1])]
  elif valuea[0] == "sedang" and valueb[0] == "mahal":
    return ["rendah",min(valuea[1] , valueb[1])]
  elif valuea[0] == "bagus" and valueb[0] == "murah":
    return ["tinggi",min(valuea[1] , valueb[1])]
  elif valuea[0] == "bagus" and valueb[0] == "sedang":
    return ["tinggi",min(valuea[1] , valueb[1])]
  elif valuea[0] == "bagus" and valueb[0] == "mahal":
    return ["rendah",min(valuea[1] , valueb[1])]

def inferensiiiiiiiiiiiii (hasilfuzzy):
  if len (hasilfuzzy) == 4 :
    if hasilfuzzy[0][0] == hasilfuzzy [1][0] == hasilfuzzy [2][0] ==hasilfuzzy [3][0]:
      return [[hasilfuzzy[0][0],max(hasilfuzzy [0][1],hasilfuzzy [1][1],hasilfuzzy [2][1],hasilfuzzy [3][1])]]
    elif hasilfuzzy [0][0] ==hasilfuzzy [1][0] == hasilfuzzy [3][0]:
      return [[hasilfuzzy[0][0],max(hasilfuzzy [0][1],hasilfuzzy [1][1],hasilfuzzy [3][1])],hasilfuzzy[2]]
    # elif hasilfuzzy [0][0] == hasilfuzzy [][]
    else :
      return hasilfuzzy
  elif len (hasilfuzzy)  == 2 :
    if hasilfuzzy[0][0] == hasilfuzzy [1][0]:
      return [[hasilfuzzy[0][0],max(hasilfuzzy[0][1],hasilfuzzy[1][1])]]
    else :
      return [hasilfuzzy[0],hasilfuzzy[1]]
  elif len (hasilfuzzy) == 1:
    return hasilfuzzy

"""# **Defuzzyfikasi**"""

def akhirnyaDefuzzyfikasi (hasilfuzzy):
  if len(hasilfuzzy) == 1: 
    if hasilfuzzy[0][0] == "rendah":
      return ((10+20+30+40+50+60+70)*hasilfuzzy[0][1])/((7*hasilfuzzy[0][1]))
    elif hasilfuzzy[0][0] == "tinggi":
      return ((80+90+100)*hasilfuzzy[0][1])/(3*hasilfuzzy[0][1])
  elif len(hasilfuzzy) == 2:
    if hasilfuzzy[0][0] == "rendah":
      return (((10+20+30+40+50+60+70)*hasilfuzzy[0][1])+((80+90+100)*hasilfuzzy[1][1]))/((7*hasilfuzzy[0][1])+(3*hasilfuzzy[1][1]))
    elif hasilfuzzy [0][0] == "tinggi":
      return (((10+20+30+40+50+60+70)*hasilfuzzy[1][1])+((80+90+100)*hasilfuzzy[0][1]))/((7*hasilfuzzy[1][1])+(3*hasilfuzzy[0][1]))

"""# **Main Program dan output data yang belum di sort**"""

hasilakhir= []
q = []
w =[]
e =[]
r = []
for i in range (len(kualitas)):
  kualitasTemp = kualitas[i]
  hargaTemp = harga[i]
  fuzzyfikasiKualitas = []
  fuzzyfikasiHarga = []
  fuzzyfikasiKualitas.append (fuzzyficationQuality(kualitasTemp))
  fuzzyfikasiHarga.append(fuzzyficationPrice(hargaTemp))
  indexHargaFuzzy = fuzzyfikasiHarga[0]
  indexKualitasFuzzy = fuzzyfikasiKualitas[0]
  if len(indexKualitasFuzzy) == 1 and len(indexHargaFuzzy) == 1:
    tempIndex = []
    hasil = fuzzyrules(indexKualitasFuzzy[0],indexHargaFuzzy[0])
    tempIndex.append (hasil)
  elif len(indexKualitasFuzzy) == 2 and len(indexHargaFuzzy) == 1:
    tempIndex = []
    hasil1 = fuzzyrules(indexKualitasFuzzy[0],indexHargaFuzzy[0])
    hasil2 = fuzzyrules(indexKualitasFuzzy[1],indexHargaFuzzy[0])
    tempIndex.append (hasil1)
    tempIndex.append(hasil2)
  elif len(indexKualitasFuzzy) == 1 and len(indexHargaFuzzy) == 2 :
    tempIndex = []
    hasil1 = fuzzyrules(indexKualitasFuzzy[0],indexHargaFuzzy[0])
    hasil2 = fuzzyrules(indexKualitasFuzzy[0],indexHargaFuzzy[1])
    tempIndex.append(hasil1)
    tempIndex.append(hasil2)
  elif len(indexKualitasFuzzy) == 2 and len(indexHargaFuzzy) == 2 :
    tempIndex = []
    hasil1 = fuzzyrules(indexKualitasFuzzy[0],indexHargaFuzzy[0])
    hasil2 = fuzzyrules(indexKualitasFuzzy[0],indexHargaFuzzy[1])
    hasil3 = fuzzyrules(indexKualitasFuzzy[1],indexHargaFuzzy[0])
    hasil4 = fuzzyrules(indexKualitasFuzzy[1],indexHargaFuzzy[1])
    tempIndex.append(hasil1)
    tempIndex.append(hasil2)
    tempIndex.append(hasil3)
    tempIndex.append(hasil4)
  else :
    print("Data yang diberikan tidak lengkap")
  hasilInferensi = inferensiiiiiiiiiiiii(tempIndex)
  hasilDefuzzyfikasi = akhirnyaDefuzzyfikasi(hasilInferensi)
  helpme = [kualitasTemp,hargaTemp,hasilDefuzzyfikasi]
  q.append(kualitasTemp)
  w.append(hargaTemp)
  e.append(hasilDefuzzyfikasi)
  r.append(i+1)
list_sort = sorted(zip(e,q,w,r),reverse=True)
list_sort = [list(i) for i in list_sort]

"""# **Sorting dan 5 hasil terbaik**"""

print(" ")
print("---------------------------------------------------------------------------------------------------------------------")
print("-------------------------------------------Berikut adalah 5 hasil terbaik--------------------------------------------")
print("---------------------------------------------------------------------------------------------------------------------")
print(" ")
print("1 .","Toko ke",list_sort[0][3],"dengan harga",list_sort[0][2],"dan kualitas",list_sort[0][1],"dengan nilai fuzzy",list_sort[0][0])
print("2 .","Toko ke",list_sort[1][3],"dengan harga",list_sort[1][2],"dan kualitas",list_sort[1][1],"dengan nilai fuzzy",list_sort[1][0])
print("3 .","Toko ke",list_sort[2][3],"dengan harga",list_sort[2][2],"dan kualitas",list_sort[2][1],"dengan nilai fuzzy",list_sort[2][0])
print("4 .","Toko ke",list_sort[3][3],"dengan harga",list_sort[3][2],"dan kualitas",list_sort[3][1],"dengan nilai fuzzy",list_sort[3][0])
print("5 .","Toko ke",list_sort[4][3],"dengan harga",list_sort[4][2],"dan kualitas",list_sort[4][1],"dengan nilai fuzzy",list_sort[4][0])
print(" ")
print("---------------------------------------------------------------------------------------------------------------------")
print("-------------------------------------------Berikut adalah hasil seterusnya-------------------------------------------")
print("---------------------------------------------------------------------------------------------------------------------")
print(" ")
for i in range (len(list_sort)-5):
  print(i+6, ".","Toko ke",list_sort[i+5][3],"dengan harga",list_sort[i+5][2],"dan kualitas",list_sort[i+5][1],"dengan nilai fuzzy",list_sort[i+5][0])

"""# **Save hasil ke excel**"""

import pandas as pd
df = pd.DataFrame(list_sort)
writer = pd.ExcelWriter('Tupro Fuzzy Logic.xls')
df.to_excel(writer, index = False)
writer.save()